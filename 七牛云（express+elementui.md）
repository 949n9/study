## 图片（七牛云）

前端采用element-ui库，vue技术栈，后台采用express

使用七牛云有很多种方法，可以在前端直接上传的七牛云，也可以把数据传到后端，再又后端传到七牛云。

这里我采用的是第一种，在前端直接传送图片到七牛云，然后通过`el-upload`的`onsuccess`钩子直接拿到七牛返回的数据。（具体往后看）

### 七牛云

* 首先注册，实名认证，需要大概一天。
* 进入控制台，选择对象存储，新建仓库，记住存储空间名字，还有存储的区域
* 在新建的存储空间的首页可以看到融合 CDN 测试域名，这个是送的30天外链域名。读图片就从这个域名读

前期准备就这样



### 后台

后台需要做的主要是获取token，前端页面在created的钩子调用就行了

#### 安装七牛

`npm install qiniu` 或`yarn add qiniu`

#### 后台配置获取token

在任何一个子路由下写就可以了。

```js
const express = require('express')
const router = express.Router();
const qiniu = require('qiniu') // 引入七牛

var bucket = 'dj-cloud';  
// 空间名
var imageUrl = 'pxchssngy.bkt.clouddn.com'; 
// 域名名称（我用的是融合 CDN 测试域名，有自己域名也可以绑定）
var accessKey = '5NuGKkcA5uPhIW9SYkyMlLIQ2W4OAfe-pH89W9NT';  //个人中心-密匙管理，每个人都不一样
var secretKey = 'U8siCLyHci4tYtRlZEDqMI8EOv3teD5wtv9Fk2kL';  //个人中心-密匙管理，每个人都不一样
var mac = new qiniu.auth.digest.Mac(accessKey, secretKey);

var options = {
    scope: bucket,
};
var putPolicy = new qiniu.rs.PutPolicy(options);
var uploadToken = putPolicy.uploadToken(mac);

var config = new qiniu.conf.Config();
config.zone = qiniu.zone.Zone_z1;  // 机房区域 华北是z1 具体看官方文档

router.get('/token', (req, res) => {
   res.json({
       code: 200,
       uploadToken
   })
})

```

需要说明的是`accessKey`和`secretKey`，还有`config.zone`都是自己的七牛云的数据，不要直接复制我的。



### 前端

```html
        <el-upload
          ref="upload"
          :multiple="true"
          action="https:///upload-z1.qiniup.com"
          accept="image/jpeg,image/gif,image/png,image/bmp"
          :before-upload="beforeUpload"
          :on-change="handleChange"
          :data="postData"
          :on-success="successupload"
        >
          <img v-if="imageUrl" :src="imageUrl" class="avatar" alt="">
          <i v-else class="el-icon-plus avatar-uploader-icon" />
        </el-upload>
```

其中 ：

* `action`是你的对象存储空间的[存储区域](https://developer.qiniu.com/kodo/manual/1671/region-endpoint)
* `:data="postData"`在data中定义postData,起什么名字无所谓

```js
      
      data(){
      	return{
      	  postData: {
      		token: ''
    			},
     			imageUrl: ''
      	}
      }

```

* `:on-success="successupload"` 在图片上传之后自动调用的钩子，可以在这里获取七牛云返回的数据

```js
    successupload(response, file, fileList) {
      this.ruleForm.imageUrl = `http://pxchssngy.bkt.clouddn.com/${response.key}`
    },
     //ruleForm是我要提交到数据库的表单。
     //http://pxchssngy.bkt.clouddn.com/这个七牛云送的外链域名，也就是融合 CDN 测试域名
     //response里面存的key就是上传到七牛的图片的名称
     //拼接上自己的测试域名，和key，就可以得到图片的网络地址，然后存到数据库中。
```

* 现在是点击完图片就自动提交，如果要阻止默认时间，就加个`auto-upload=“false”`，然后给`el-upload`标签绑定一个ref，通过触发`this.$refs.upload.submit()`来完成图片的提交，方法可以自己发挥。

#### 前端完整代码（示例）

```html
<template>
  <div class="form-content">
    <h1>添加轮播图</h1>
    <el-form ref="ruleForm" :model="ruleForm" label-width="100px">
      <el-form-item label="标题" prop="title">
        <el-input v-model="ruleForm.title" style="width: 500px" />
      </el-form-item>
      <el-form-item label="跳转链接" prop="jump">
        <el-input v-model="ruleForm.jump" style="width: 500px" />
      </el-form-item>
      <el-form-item label="排序" prop="order">
        <el-input v-model="ruleForm.order" style="width: 500px" />
      </el-form-item>
      <el-form-item ref="uploadElement" label="上传图片" prop="imageUrl">
        <el-input v-if="false" v-model="imageUrl" />
        <el-upload
          ref="upload"
          class="avatar-uploader"
          :show-file-list="false"
          :multiple="true"
          action="https:///upload-z1.qiniup.com"
          accept="image/jpeg,image/gif,image/png,image/bmp"
          :before-upload="beforeUpload"
          :on-change="handleChange"
          :data="postData"
          :on-success="successupload"
        >
          <img v-if="imageUrl" :src="imageUrl" class="avatar" alt="">
          <i v-else class="el-icon-plus avatar-uploader-icon" />
        </el-upload>
      </el-form-item>
      <el-form-item>
        <el-button type="primary" @click="submitForm('ruleForm')">立即创建</el-button>
        <el-button @click="resetForm('ruleForm')">重置</el-button>
      </el-form-item>
    </el-form>
  </div>
</template>

<script>
import { token, createSlide } from '@/api/slides'

export default {
  data() {
    return {
      ruleForm: {
        title: '',
        order: '',
        jump: '',
        imageUrl: ''
      },
      postData: {
        token: ''
      },
      imageUrl: '',
      rules: {
        title: [{
          required: true, message: '请输入活动名称', trigger: 'blur'
        }
        ],
        order: [{
          required: true, message: '请输入排序', trigger: 'blur'
        }
        ],
        jump: [{
          required: true, message: '请输入跳转地址', trigger: 'blur'
        }
        ],
        imageUrl: [{
          required: true, message: '请上传图片', trigger: 'blur'
        }
        ]
      }
    }
  },
  created() {
    this.gettoken()
  },
  methods: {
    onSubmit() {
      console.log('submit!')
    },
    submitForm(formName) {
      const vm = this
      this.$refs[formName].validate((valid) => {
        if (valid) {
          createSlide(vm.ruleForm)
          this.$router.push({ path: '/slide' })
        } else {
          return false
        }
      })
    },
    resetForm(formName) {
      this.$refs[formName].resetFields()
      this.ruleForm.imageUrl = ''
    },

    handleChange(file) {
      this.imageUrl = URL.createObjectURL(file.raw)
    },

    beforeUpload(file) {
      return true
    },
    successupload(response, file, fileList) {
      this.ruleForm.imageUrl = `http://pxchssngy.bkt.clouddn.com/${response.key}`
    },
    gettoken() {
      token().then((res) => {
        this.postData.token = res.uploadToken
      })
    }
  }
}
</script>

<style scoped>
.form-content{
  width: 880px;
  margin: 30px;
}
h1{
  margin-bottom: 40px;
}
.avatar-uploader .el-upload {
  border: 2px dashed #d9d9d9;
  border-radius: 6px;
  cursor: pointer;
  position: relative;
  overflow: hidden;
}
.avatar-uploader .el-upload:hover {
  border-color: #409EFF;
}
.avatar-uploader-icon {
  font-size: 28px;
  color: #8c939d;
  width: 400px;
  height: 178px;
  line-height: 178px;
  text-align: center;
}
.avatar {
  width: 346px;
  height: 178px;
  display: block;
}
.avatar-uploader-icon[data-v-4bf41119] {
  font-size: 28px;
  color: #8c939d;
  width: 400px;
  height: 178px;
  line-height: 178px;
  text-align: center;
  border: 1px solid #DCDFE6;
  border-radius: 5px;
}
</style>

```